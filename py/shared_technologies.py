import pandas as pd

'''
DTx + cited patents를 disease_label db에서 뽑기

{ wipsonkey: {$in: ['5420052005763','4920047005061','5420023004414','5420016001013','5420016005584','4920012005676','5420009000560',
'4920007004316','5419046000420','5419035000369','5419022000337','5416037000393','5420043006837','4919034007273','5418011004715',
'5416005000163','5421019006658','5416028005146','4921014001549','4920037001502','5413019005404','4921017006586','5420048005573',
'5420043000406','5420035000449','5420025000388','5420019005994','5421008004822','5421011006076','5419026006552','4919021000998',
'4921005001005','5420040000461','4920033001063','5420032000428','4919036001210','5419020000416','5419012000466','5419002000377',
'4919002003617','5418046003843','5418026000871','4917048000910','4917017004515','4603041000650','4921005005788','4920047005815',
'5420045005143','5420045005146','5420043005578','5421027005871','5420021005578','4919050001042','4919040006012','5419034004101',
'4919015001424','4918020000945','5418016004239','4921016001575','5420017000207','4920047005808','4920038005624','4920037001020',
'4920029001550','4920009001043','5420001000392','4920001001058','4919046005328','4919035003900','4919030002874','4919023005619',
'5419022000337','4919012000926','4919011000770','4918049000916','4918048001254','4918044000891','4918040000963','4918040000964',
'5418037000397','5418027000407','5418027004841','4918022003914','4918015004874','4918013000953','4918010004814','4917048000910',
'4917047001159','5417046000325','5417036000386','4917034001233','4917033000889','4917019000907','4917017004515','4917009000910',
'4917009000928','4916049000901','4916043000868','5416042000385','4916040004369','4916038000972','4916038001410','4916038001502',
'5416037000393','4916028004436','4916024004367','5416021000386','4916021004599','5416017000350','4916015000801','4916014000834',
'4916012004443','5416011005220','4916008000816','4915052001149','4915047004299','5415042000395','4915042001296','4915036001191',
'4915019002030','4915015002015','5415008004434','5415005005114','4915004002750','5414050004858','4914040002026','4914019001024',
'4914011001766','4914009005282','4914004004003','4914001001716','4913050001708','5413040006541','4913038000855','5413037004352',
'4913023001661','4913023001695','5413020005686','4913013001731','4913011003939','4913002001853','4913001001706','4912036000833',
'4912022001781','5412020005592','5412015004114','4912012004399','4912012004410','4912008004440','4911052001530','4911050001673',
'5411043005204','5411040006298','4911037001240','4911035001568','4911030002904','4911029001571','4911020001400','4911010000803',
'5411003004680','4910050001529','5410046004889','5410044005006','5410024005573','4910020004317','4910019001541','5410013004372',
'4910005001480','5409053006258','5409038005196','5409027000628','5409025000714','4909012001308','4909009001320','5409003005029',
'5408036005293','5408035006198','5408010000455','5408006004767','5408003004837','4908001000622','5407052004522','4907041002694',
'5407039004957','4907030000242','5306051004684','4806048000325','5306032004195','5306020000620','5306017003455','4806013000388',
'4806012001124','5306009005218','4806009000367','5205051004277','5205042005029','4705033000352','4705015000953','4604002001770',
'4603049003367','5103049004091','4603026000360','4603019001208','5103004001323','4603001000329','5102043003862','4502031000831',
'5102026003737','5102010000278','5102009001605','4501035001467','4501031001368','4501014003610','4501003001044','4500047003090',
'4500036001572','4500029001541','4500017001638','4599033000661','4599025000420','4599024000677','4598035001319','4598026001289',
'4598019000485','4595047001212','4595024000484','4594036000989','4594011000446','4593052000502','4592025001231','4592011000520',
'4592011001288','4591053000564','4591037001217','4590018001235','4589046000370','4589023000601','4589014000558','4588038000430',
'4588010001245','4586049000464','4586014000383'] }}
'''



# ----------------- description bern ----------------- #
import sys, os
os.getcwd()
sys.path.append(os.path.abspath(os.path.join('.', 'py')))

import pymongo
import pymongo_handler
mongo = pymongo_handler.DBHandler()

# 제대로 들어갔는지 확인
db = mongo.client['patents']
collection = db['disease_label']

cursor = collection.aggregate([
    {
        '$match': {
            'wipsonkey': {
                '$in': [
                    '5420052005763', '4920047005061', '5420023004414', '5420016001013', '5420016005584', '4920012005676', '5420009000560', '4920007004316', '5419046000420', '5419035000369', '5419022000337', '5420043006837', '4919034007273', '5418011004715', '5416005000163', '5421019006658', '5416028005146', '4921014001549', '4920037001502', '5413019005404', '4921017006586', '5420048005573', '5420043000406', '5420035000449', '5420025000388', '5420019005994', '5421008004822', '5421011006076', '5419026006552', '4921005001005', '4920047005808', '5420040000461', '4920033001063', '5420032000428', '4919036001210', '5419020000416', '5419012000466', '5419002000377', '4919002003617', '5418046003843', '5418026000871', '4917048000910', '4603041000650', '4921005005788', '4920047005815', '5420045005143', '5420045005146', '5420043005578', '5421027005871', '5420021005578', '4919050001042', '4919040006012', '5419034004101', '4919015001424', '4918020000945', '5418016004239', '4921016001575', '5420017000207', '5420001000392', '4919021000998', '4919011000770', '5418027000407', '4918022003914', '4916021004599', '4920038005624', '4920037001020', '4920029001550', '4920009001043', '4920001001058', '4919046005328', '4919035003900', '4919030002874', '4919023005619', '4919012000926', '4918049000916', '4918048001254', '4918044000891', '4918040000963', '4918040000964', '5418037000397', '5418027000407', '5418027004841', '4918015004874', '4918013000953', '4918010004814', '4917047001159', '5417046000325', '5417036000386', '4917034001233', '4917033000889', '4917019000907', '4917017004515', '4917009000910', '4917009000928', '4916049000901', '4916043000868', '5416042000385', '4916040004369', '4916038000972', '4916038001410', '4916038001502', '5416037000393', '4916028004436', '4916024004367', '5416021000386', '5416017000350', '4916015000801', '4916014000834', '4916012004443', '5416011005220', '4916008000816', '4915052001149', '4915047004299', '5415042000395', '4915042001296', '4915036001191', '4915019002030', '4915015002015', '5415008004434', '5415005005114', '4915004002750', '5414050004858', '4914040002026', '4914019001024', '4914011001766', '4914009005282', '4914004004003', '4914001001716', '4913050001708', '5413040006541', '4913038000855', '5413037004352', '4913023001661', '4913023001695', '5413020005686', '4913013001731', '4913011003939', '4913002001853', '4913001001706', '4912036000833', '4912022001781', '5412020005592', '5412015004114', '4912012004399', '4912012004410', '4912008004440', '4911052001530', '4911050001673', '5411043005204', '5411040006298', '4911037001240', '4911035001568', '4911030002904', '4911029001571', '4911020001400', '4911010000803', '5411003004680', '4910050001529', '5410046004889', '5410044005006', '5410024005573', '4910020004317', '4910019001541', '5410013004372', '4910005001480', '5409053006258', '5409038005196', '5409027000628', '5409025000714', '4909012001308', '4909009001320', '5409003005029', '5408036005293', '5408035006198', '5408010000455', '5408006004767', '5408003004837', '4908001000622', '5407052004522', '4907041002694', '5407039004957', '4907030000242', '5306051004684', '4806048000325', '5306032004195', '5306020000620', '5306017003455', '4806013000388', '4806012001124', '5306009005218', '4806009000367', '5205051004277', '5205042005029', '4705033000352', '4705015000953', '4603049003367', '5103049004091', '4603026000360', '4603019001208', '5103004001323', '4603001000329', '5102043003862', '5102026003737', '5102010000278', '5102009001605'
                ]
            }
        }
    }, {
        '$match': {
            'CUI_list': {
                '$in': [
                    'C0039058', 'C0030660', 'C0012634', 'C0001546', 'C0003469', 'C0236816', 'C0001818', 'C0270549', 'C0027821', 'C0027932', 'C0038436', 'C0028768', 'C3837219', 'C0236748', 'C0086769', 'C0030319', 'C0236800', 'C0236794', 'C0349231', 'C0001819', 'C0236801', 'C0031572', 'C0003477', 'C2985218', 'C1263846', 'C0339002', 'C4042924', 'C0005586', 'C0005587', 'C0024713', 'C0009241', 'C0860625', 'C0004310', 'C0034880', 'C0338656', 'C0554976', 'CN295528', 'C5206799', 'C5392105', 'C2748208', 'C0233794', 'C0234985', 'C4721773', 'C0554978', 'C0011206', 'C0860621', 'C0920253', 'C2985224', 'C2985225', 'C0497327', 'C0002395', 'C0022336', 'C0751072', 'C0001849', 'C2717758', 'C0338455', 'C1836151', 'C0338451', 'C0020179', 'C0270707', 'C0752347', 'C0011265', 'C0282513', 'C0011268', 'C4024935', 'C0011269', 'C2985226', 'C4042891', 'C0700201', 'C0877792', 'C0037316', 'C0752287', 'C0030508', 'C3887605', 'C0393777', 'C4476680', 'C0751774', 'C0752301', 'C0035258', 'C0752294', 'C0751771', 'C0037320', 'C0752299', 'C0037672', 'C0012746', 'C0683416', 'C0026773', 'C0236795', 'C0020703', 'C0233746', 'C4042784', 'C0003125', 'C3840121', 'C0596170', 'C2267227', 'C0525042', 'C5197769', 'C4505163', 'C2203937', 'C0031873', 'C0232480', 'C5197752', 'C1721053', 'C0154575', 'C0013473', 'C0003123', 'C0006370', 'C1963717', 'C0013895', 'C0014394', 'C0270328', 'C4023746', 'C0270327', 'C0016811', 'C0014089', 'C0015480', 'C0085277', 'C0026785', 'C0021122', 'C0016142', 'C0030662', 'C0021776', 'C0022734', 'C0040953', 'C3887551', 'C0853895', 'C0029227', 'C0041862', 'C0041891', 'C0178546', 'C2363919', 'C0149654', 'C0236818', 'C0023015', 'C0001825', 'C0003113', 'C0454644', 'C0236826', 'C0023014', 'C0476254', 'C0236827', 'C0037822', 'C4048283', 'C4072928', 'C0038506', 'C0023186', 'C0029121', 'C0524528', 'C1510586', 'C0236791', 'C4750718', 'C0525045', 'C0010598', 'C0011581', 'C2063866', 'C0013415', 'C1269683', 'C0221074', 'C0520676', 'C0085159', 'C2939186', 'C2985351', 'C0011570', 'C0011573', 'C0025193', 'C0282126', 'C0011579', 'C0041696', 'C0221163', 'C4041080', 'C0002622', 'C1704427', 'C0233795', 'C0002624', 'C0338591', 'C0009792', 'C0041657', 'C0013388', 'C0751840', 'C1535926', 'C0236964', 'C3272759', 'C1837249', 'C0020225', 'C0025958', 'C2362742', 'C2932714', 'C1848201', 'C0008066', 'C0008074', 'C0036346', 'C0009460', 'C2921028', 'C0150080', 'C0751265', 'C4019167', 'C1261470', 'C0009694', 'C0009730', 'C0008073', 'C0011757', 'C0424605', 'C1836830', 'C0025362', 'C5401298', 'C0034748', 'C3641147', 'C4479652', 'C3714756', 'C0010314', 'C0013080', 'C0270972', 'C0006009', 'C0026106', 'C0026351', 'C3161330', 'C1846149', 'C0036857', 'C0032897', 'C0035934', 'C4319808', 'C0175702', 'C0206115', 'C1136249', 'C0026613', 'C0026884', 'C0086664', 'C0431336', 'C0431334', 'C3274486', 'C0431335', 'C0525043', 'C0038273', 'C0233593', 'C1963933', 'C4022387', 'C1969697', 'C4023013', 'C4023014', 'C1829460', 'C0040188', 'C0040517', 'C0030482', 'C0015269', 'C0015957', 'C0024862', 'C0030764', 'C0036039', 'C0042979', 'C0031212', 'C0003431', 'C0004444', 'C0006012', 'C1704373', 'C0011548', 'C0019681', 'C0020701', 'C0027402', 'C0009595', 'C0030477', 'C0030631', 'C0036339', 'C0036363', 'C0033953', 'C1384606', 'C0242350', 'C1868524', 'C0033117', 'C0243000', 'C0686346', 'C0033038', 'C0525047', 'C2004487', 'C0042266', 'C0236988', 'C0033958', 'C0011251', 'C0520677', 'C0855261', 'C0855262', 'C0855260', 'C0948981', 'C0855263', 'C0855264', 'C0033975', 'C0001723', 'C0033941', 'C0338614', 'C4025789', 'C0748076', 'C0036337', 'C0036341', 'C0036344', 'C0221765', 'C0036347', 'C0023105', 'C0036349', 'C0030484', 'C0036351', 'C0220702', 'C1864010', 'C1838069', 'C1833247', 'C1864153', 'C1864275', 'C1864152', 'C1864124', 'C1858050', 'C0543918', 'C1842605', 'C1837893', 'C2751663', 'C2677614', 'C3151380', 'C3151408', 'C3808494', 'C3808913', 'C4539944', 'C0036939', 'C0221520', 'C0270381', 'C0392322', 'C0036358', 'C2987469', 'C0525046', 'C0006895', 'C3658283', 'C2350431', 'C1456784', 'C0236989', 'C0015786', 'C0016738', 'C3898830', 'C0020594', 'C0033949', 'C0017250', 'C0036903', 'C1960034', 'C0036908', 'C0036913', 'C0851578', 'C0917799', 'C4024925', 'C0033138', 'C0751757', 'C0917801', 'C1561701', 'C0751249', 'C1333141', 'C0852928', 'C0206042', 'C0393760', 'C0860649', 'C4531176', 'C0393761', 'C0349255', 'C0033139', 'C4531177', 'C0541798', 'C0206085', 'C0027404', 'C0007384', 'C0852563', 'C2830004', 'C1285445', 'C0037448', 'C1335368', 'C0041665', 'C2825032', 'C0037650', 'C0027804', 'C0005887', 'C5197792', 'C0154558', 'C0017183', 'C0154552', 'C0020604', 'C0154548', 'C0009946', 'C0017650', 'C0154551', 'C0338945', 'C0236969', 'C0024809', 'C0236664', 'C0001940', 'C0001973', 'C0001969', 'C0001957', 'C0236970', 'C0033936', 'C0043121', 'C0236733', 'C0236736', 'C0021449', 'C4316909', 'C5197877', 'C0027412', 'C3160897', 'C0027609', 'C0031391', 'C0038579', 'C4505278', 'C0038587', 'C0586323', 'C3641116', 'C3540839', 'C0028047', 'C3274502', 'C3642460', 'C3641105', 'C0040336', 'C3272651', 'C1336758', 'C4042925', 'C0038441', 'C0004842', 'C0009426', 'C3203533', 'C5392066', 'C0338831', 'C1411876'
                ]
            }
        }
    }, {
        '$project': {
            '_id': 1,
            'wipsonkey': 1,
            'MESH': 1,
            'CUI_list': 1
        }
    }
])

dt = pd.DataFrame({'wipsonkey': [], 'CUI_list': []})

for docs in cursor:
    # print(doc['wipsonkey'])
    doc = {'wipsonkey': docs['wipsonkey'], 'CUI_list': docs['CUI_list']}
    dt = dt.append(doc, ignore_index=True)

# dt = pd.read_csv('data/mapping/disease_label_patents_210727.csv')
dt.columns
dt = dt[dt['CUI_list'].notnull()]

dt.wipsonkey.nunique()

import ast

# dt.CUI_list = dt.CUI_list.apply(lambda x: ast.literal_eval(x)) # str으로 작성된 list를 list 형식으로

dt.wipsonkey.nunique()

dt = dt.explode('CUI_list')
dt.drop_duplicates(['CUI_list', 'wipsonkey'], inplace=True)

import pickle
# with open('data/disease/mental_and_behavioral_CUIs_final_0726.pickle', 'rb') as f:
with open('data/disease/psychiatric_disorder_CUIs.pickle', 'rb') as f:
    filt = pickle.load(f)

len(filt['cui'])

# dt = dt.loc[dt['CUI_list'].apply(lambda x: x in filt['cui']), :]
dt = dt.loc[dt['CUI_list'].apply(lambda x: x in filt), :]
dt.wipsonkey.nunique()

tmp_list = dt.groupby('CUI_list')['wipsonkey'].apply(list)

# imports
import networkx as nx
from operator import itemgetter
from networkx.algorithms.bipartite.matrix import biadjacency_matrix

def to_adjacency_matrix(data):
    g = nx.DiGraph()
    g.add_edges_from(data)
    partition_0 = set(map(itemgetter(0), data))
    partition_1 = set(map(itemgetter(1), data))
    return biadjacency_matrix(g, partition_0).toarray(), partition_0, partition_1

adj_m, cuis, wipsonkey = to_adjacency_matrix(list(dt[['CUI_list','wipsonkey']].itertuples(index=False)))

adj_m.shape # (cui, patent)


import numpy as np
co_patent = np.dot(adj_m, adj_m.T) # disease-disease matrix
pd.DataFrame(co_patent, index = cuis, columns=cuis)

tri_upper_no_diag = np.triu(co_patent, k=1) # diagonal 지우고 upper matrix => 본인-본인 관계 제거, 두 번 반복되는 거 방지
np.argwhere( tri_upper_no_diag > 0 ).shape # shared patent인 disease

for pair in np.argwhere( tri_upper_no_diag > 8 ):
    print(list(cuis)[pair[0]], "-", list(cuis)[pair[1]])

# psychiatric만 추출했을 때
# with open("data/disease/shared_technologies_psychiatric_n_behavioral.pickle", "wb") as f:
with open("data/disease/shared_technologies_psychiatric.pickle", "wb") as f:
    pickle.dump(pd.DataFrame(tri_upper_no_diag, index=cuis, columns=cuis), f)

# psychiatric만 추출했을 때
with open("data/disease/shared_technologies_psychiatric.pickle", "rb") as f:
    tri_upper_no_diag = pickle.load(f)


# 전체 다 추출했을 때
with open("data/disease/shared_technologies_all.pickle", "wb") as f:
    pickle.dump(pd.DataFrame(tri_upper_no_diag, index=cuis, columns=cuis), f)